import hashlib
import os
import requests
import vt
import json


def get_sample():
    root_dir = os.getcwd()
    in_dir = os.path.join(root_dir, "in")
    for root, dirs, files in os.walk(in_dir):
        for file in files:
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, root_dir)
            return open(relative_path, "rb")


def get_VT_analysis(sample):
    api_key = ""  # Add your VirusTotal API key here
    client = vt.Client(api_key)
    try:
        # Submit the sample to VirusTotal for analysis and wait for the results
        analysis = client.scan_file(sample, wait_for_completion=True)
        return analysis
    except vt.APIError as e:
        print(f"VirusTotal API Error: {e}")
    finally:
        client.close()


def get_ioc_stats(stats):
    # Calculate the number of good and bad Indicators of Compromise (IOCs)
    good = stats["harmless"] + stats["undetected"]
    bad = stats["suspicious"] + stats["malicious"]
    iocs = [good, bad]
    return iocs


def get_malware_names(analysis):
    res = []
    malware_results = analysis.results
    # Iterate over all the vendors that detected the sample as malicious or suspicious
    for vendor in malware_results:
        if malware_results[vendor]["category"] == "malicious" or malware_results[vendor]["category"] == "suspicious":
            res.append((vendor, malware_results[vendor]["result"]))
        else:
            res.append((vendor, malware_results[vendor]["category"]))
    return res


def get_analysis_attributes(analysis):
    # Get the IOCs statistics and the list of malware names from the analysis results
    stats = get_ioc_stats(analysis.stats)
    malware_names = get_malware_names(analysis)
    return stats, malware_names


def send_to_graylog(json_str):
    url = 'http://addyourip:12202/gelf'  # add your gralog ip:port
    headers = {'content-type': 'application/json'}
    requests.post(url, data=json_str, headers=headers)


def get_json_output(stats, detections, hash):
    output_rating = {
        "short_message": "Malware analyzed trough VT script",
        "vt_harmless_rating": stats[0],
        "vt_malicious_rating": stats[1],
        "sample_hash": hash

    }
    for t in detections:
        output_rating.update({
            f"{t[0]}": t[1]
        })

    output_rating = json.dumps(output_rating)
    return output_rating


def get_hash_from_file(sample):
    # Create a SHA-256 hash object
    hasher = hashlib.sha256()

    # Read the file in chunks and update the hash object
    while True:
        data = sample.read(65536)  # 64 KB chunks
        if not data:
            break
        hasher.update(data)

    # Return the hexadecimal representation of the hash

    return hasher.hexdigest()


def main():
    sample = get_sample()
    hashed_file = get_hash_from_file(sample)
    analysis_res = get_VT_analysis(sample)
    stats, names = get_analysis_attributes(analysis_res)
    data = get_json_output(stats, names, hashed_file)
    send_to_graylog(data)


if __name__ == '__main__':
    main()
