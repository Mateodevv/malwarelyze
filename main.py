import json
import os
import vt
import sqlite3


def get_sample():
    root_dir = os.getcwd()
    in_dir = os.path.join(root_dir, "in")
    for root, dirs, files in os.walk(in_dir):
        for file in files:
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, root_dir)
            return open(relative_path, "rb")


def get_VT_analysis(sample):
    api_key = ""  # Add your VirusTotal API key here
    client = vt.Client(api_key)
    try:
        # Submit the sample to VirusTotal for analysis and wait for the results
        analysis = client.scan_file(sample, wait_for_completion=True)
        return analysis
    except vt.APIError as e:
        print(f"VirusTotal API Error: {e}")


def get_ioc_stats(stats):
    # Calculate the number of good and bad Indicators of Compromise (IOCs)
    good = stats["harmless"] + stats["undetected"]
    bad = stats["suspicious"] + stats["malicious"]
    iocs = [good, bad]
    return iocs


def get_malware_names(analysis):
    res = []
    malware_results = analysis.results
    # Iterate over all the vendors that detected the sample as malicious or suspicious
    for vendor in malware_results:
        if malware_results[vendor]["category"] == "malicious" or malware_results[vendor]["category"] == "suspicious":
            res.append((vendor, malware_results[vendor]["result"]))
    return res


def get_analysis_attributes(analysis):
    # Get the IOCs statistics and the list of malware names from the analysis results
    stats = get_ioc_stats(analysis.stats)
    malware_names = get_malware_names(analysis)
    return stats, malware_names


def populate_db(data):
    # Connect to the database
    conn = sqlite3.connect('out/malware_detection.db')
    c = conn.cursor()
    data = json.loads(data)
    # Insert data into vt_results table
    vt_results_data = (data['vt_harmless_rating'], data['vt_malicious_rating'])
    c.execute("INSERT INTO vt_rating (vt_harmless_rating, vt_malicious_rating) VALUES (?, ?)", vt_results_data)
    prim_id = c.lastrowid
    # Insert data into detected_malwarenames table
    for malware in data['malware_detections']:
        malware_data = (prim_id, malware[0], malware[1])
        c.execute("INSERT INTO vt_detected_malwarenames (malware_detection_id ,vendor, malware_name) VALUES (?, ?, ?)",
                  malware_data)

    conn.commit()
    conn.close()


def get_json_output(stats, detections):
    output_rating = {
        "vt_harmless_rating": stats[0],
        "vt_malicious_rating": stats[1],
        "malware_detections": detections

    }
    output_rating = json.dumps(output_rating)
    print(output_rating)
    return output_rating


def main():
    sample = get_sample()
    analysis_res = get_VT_analysis(sample)
    stats, names = get_analysis_attributes(analysis_res)
    data = get_json_output(stats, names)
    populate_db(data)


if __name__ == '__main__':
    main()
