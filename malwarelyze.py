import json
import time
import argparse
import uuid

import requests
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

from scripts.utils.infomsg import INFO_MSG
from scripts.vtanalysis import analyze_entity
from scripts.utils.logging_config import logger
import os

API_KEY = ""
GRAYLOG_URL = ""
MON_DIR = ""
QUEUE = []
MODE = ""
OUT_FILE = ""


class NewFileHandler(FileSystemEventHandler):
    def on_created(self, event):
        if event.src_path != MON_DIR:
            logger.info(f"New file detected: {event.src_path}")
            QUEUE.append(event.src_path)
            logger.info(f"Current queue of files to analyze: {QUEUE}")

    def on_modified(self, event):
        if event.src_path in QUEUE and event.src_path != MON_DIR:
            return
        self.on_created(event)


def watch_dir(dir_path):
    event_handler = NewFileHandler()
    logger.info(f"Generated File Handler for: {dir_path}")
    observer = Observer()
    observer.schedule(event_handler, dir_path, recursive=False)
    logger.info(f"Starting directory observer for: {dir_path}")
    observer.start()

    while True:
        time.sleep(5)
        logger.info(f"Current QUEUE: {QUEUE}")
        if QUEUE:
            entity = QUEUE.pop(0)
            logger.info(f"Selecting {entity} from queue")
            try:
                logger.info(f"Starting to analyze entity: {entity}")
                reports = analyze_entity(entity=entity, api_key=API_KEY)
                generate_output(reports)
            except Exception as e:
                logger.error(f"failed to analyze entity: {entity}")
                logger.exception(e)
            time.sleep(5)
        else:
            time.sleep(1)


def _send_output_to_file(reports):
    folder_name = "reports"
    if not os.path.exists(folder_name):
        os.makedirs(folder_name)
        logger.info(f"Created folder: {folder_name}")

    for report in reports:
        file_name = str(uuid.uuid4())
        print(file_name)
        file_name = os.path.join(folder_name, file_name)
        logger.info(f"Generated filename: {file_name}")
        with open(file_name, "w") as f:
            logger.info(f"Dumping JSON to {file_name}")
            json.dump(report, f, ensure_ascii=False, indent=4)


def _send_reports_to_graylog(reports, graylog_url: str):
    headers = {'content-type': 'application/json'}
    graylog_url = f"{graylog_url}/gelf"
    logger.info(f"Generated following graylog URL: {graylog_url}")
    for report in reports:
        # Send the report to Graylog server
        report["event_name"] = "vt-analysis"
        try:
            logger.info(f"Sending report JSON data to {graylog_url}")
            requests.post(graylog_url, json=report, headers=headers)
            logger.info("Successfully sent report")
        except Exception as e:
            logger.error("Post request failed")
            logger.error(e)


def generate_output(reports):
    if OUT_FILE:
        logger.info("Sending reports to output file")
        _send_output_to_file(reports)
    if GRAYLOG_URL is not None:
        logger.info("Sending reports to Graylog")
        _send_reports_to_graylog(reports, GRAYLOG_URL)
    if not OUT_FILE and GRAYLOG_URL == "":
        logger.error(
            "No output option selected. Please use -oG <graylog_url> for Graylog output or -oF <filename> for file "
            "output")


def main():
    print(INFO_MSG)
    parser = argparse.ArgumentParser()
    parser.add_argument("--mode", dest="mode", required=True, help="monitor|file|ip|url")
    parser.add_argument("--apikey", dest="api_key", help="VirusTotal API key", required=True)
    parser.add_argument("--dir", dest="dir_path", help="Path to directory to monitor", required=False)
    parser.add_argument("--file", dest="file_path", help="Path to file to analyze", required=False)
    parser.add_argument("--ip", dest="ip", help="IP to analyze", required=False)
    parser.add_argument("--url", dest="url", help="URL to analyze", required=False)
    parser.add_argument("-oG", dest="graylog_url", help="Graylog server URL", required=False)
    parser.add_argument("-oF", dest="output_file", help="Outputs analysis to file", action="store_true", required=False)
    args = parser.parse_args()
    global MODE, API_KEY, GRAYLOG_URL, MON_DIR, OUT_FILE
    MODE = args.mode
    API_KEY = args.api_key
    MON_DIR = args.dir_path
    GRAYLOG_URL = args.graylog_url
    OUT_FILE = args.output_file

    if args.mode == "file":
        print("here")
        print(GRAYLOG_URL)
        print(OUT_FILE)
        print("end")
        if not args.file_path:
            logger.critical("Please provide a file to analyze using --file <path>")
            parser.error("File path is required for file mode")
        reports = analyze_entity(args.file_path, args.api_key)
        generate_output(reports)

    elif args.mode == "monitor":
        print("here")
        print(GRAYLOG_URL)
        print(OUT_FILE)
        print("end")
        if not args.dir_path:
            logger.critical("Please provide a directory to monitor using --dir <path>")
            parser.error("Directory path is required for monitor mode")

        watch_dir(args.dir_path)
    elif args.mode == "ip":
        if not args.ip:
            logger.critical("Please provide a directory to analyze using --ip <ip>")
            parser.error("IP is required for IP mode")
        reports = analyze_entity(args.ip, args.api_key)
        generate_output(reports)

    elif args.mode == "url":
        if not args.url:
            logger.critical("Please provide a URL to analyze using --dir <path>")
            parser.error("URL is required for URL mode")
        reports = analyze_entity(args.url, args.api_key)
        generate_output(reports)
    else:
        parser.error("Invalid mode specified. Please use --mode [file|monitor|ip|url]")


if __name__ == "__main__":
    main()
